// Where we make things look pretty

*,
*::before,
*::after {
  box-sizing: border-box;
}

:root {
  --fw-light: 300;
  --fw-normal: 400;
  --fw-semi: 500;
  --fw-bold: 700;
  --fs-h1: 1.25rem;
  --fs-h2: 1.75rem;
  --fs-body: 1rem;
  --fs-xl: 4rem;
  --clr-light: #fff;
  --clr-gray: #989898;
  --clr-dark: #444;
  --clr-accent: #D06D6D;
  --clr-accent-dark: #613131;
}

/* "Under Hiding Content Visually" in https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html
.visually-hidden:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}
 */
.sr-only:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

body {
  margin: 0;
  font-family: 'Montserrat', sans-serif;
  line-height: 1.6;
  background-image: url(../img/mars.jpg);
  background-size: cover;

  // Move to media query
  //height: 100vh;
  //overflow: hidden;

  color: var(--clr-light);

  // Need to keep the min-heigh for mobile. E.g. when the content of the body is less than 100vh,
  // the body will be less than 50vh, and the background image is double up again at the bottom.
  min-height: 100vh;
  position: relative;
}

h1, h2, h3 {
  line-height: 1;
}

a {
  color: var(--clr-accent);
  &:hover {
    color: var(--clr-accent-dark);
  }
}

.main-title {
  font-size: var(--fs-h1);
  font-weight: var(--fw-light);
  text-transform: uppercase;
  color: var(--clr-accent);
  letter-spacing: 2px;

  // 1/-1 is safer than 1/4; because you may add extra columns in the future.
  // See screen print of "Note01 - Firebox DevTool Turned on Grid insepector.jpg" for the column number
  grid-column: 1 / -1;
}

.section-title {
  font-size: var(--fs-h2);
  font-weight: var(--fw-bold);
  margin: 0;
}

.section-title--date {
  font-size: var(--fs-xl);
}

.reading {
  font-size: var(--fs-h1);
  margin: 0;
  color: var(--clr-gray);
}

.mars-current-weather {
  background: rgba(0,0,0,0.7);
  padding: 6em 2em 2em;
  max-width: 1000px;
  margin: 1em;
}

.date {
  grid-column: 1 / 2;

  &__day {
    font-size: var(--fs-h2);
    margin: 0;
    color: var(--clr-gray);
    font-weight: var(--fw-light);
  }
}

.temp {
  --border: solid 0.25em var(--clr-accent-dark);
  padding: 2em 0;
}

.wind {
  grid-column: 3 / 4;

  // This is perfect example why you will choose grid over flexbox: because you don't need to wrap
  // .section-title and .reading into another div for positioning through flexbox
  display: grid;
  column-gap: 1em;

  // We want to keep the order of the html to be title first, then reading, then wind__direction because it make sense for reading and maintenance.
  // Method 1 to move wind__direction into the first slot is: grid-auto-flow. It means you cannot leave any slot empty.
  //grid-auto-flow: dense;

  grid-template-columns: min-content 1fr;

  // SPECIAL NOTES: if you want to use 1 / -1 in line 151:
  // This is the different between implicit vs explicit grid
  //grid-template-rows: repeat(2, 1fr);

  grid-template-rows: min-content 1fr;
  align-self: start;

  .section-title,
  .reading {
    grid-column: 1 / 2;
  }

  &__direction {
    grid-column: 2 / 3;
    // This is for the parent
    // Method 2 to move wind__direction into the first slot is:
    grid-row: 1 / span 2;

    // SPECIAL NOTES: if you want to use 1 / -1 here you need to set grid-template-rows (line 141):
    //grid-row: 1 / -1;


    --size: 4rem;
    width: var(--size);
    height: var(--size);
    border-radius: 50%;
    background-color: rgba(255,255,255,0.5);

    // This is for itself and its children
    display: grid;
    place-items: center;
  }

  &__arrow {
    /* update Custom Props in JS to update the direction */
    --direction: 45deg;
    --size: 0.75rem;

    // Custom property can used directly in calc, as was import property you will need to do #:
    // e.g. width: calc(50% - #{variables.$BASE_MEASURE} * 4);
    // And 3rem is like the circle radius as the circle size is 6rem
    height: calc(var(--size) * 3);
    width: var(--size);
    background-color: var(--clr-accent-dark);

    // top, left bottom, right bottom. Start point is top left corner
    clip-path: polygon(50% 0, 0 100%, 100% 100%);

    transform: translateY(-50%) rotate(var(--direction)); // Move the arrow up and rotate 45degree from triangle center.

    // rotate from bottom center rather than center of the triangle
    // It's very important to rotation from bottom center because it makes the triangle looks like the clock minute hand.
    // You can change different rotation degree to have a look
    transform-origin: bottom center;

    transition: transform 500ms ease;
  }
}

.info {
  grid-column:  1 / 3;
}

.unit {
  // This only work in SASS. It will not work in CSS.
  @media (max-width: 900px) {
    position: absolute;
    left: 3em;
    top: 2em;
  }

  grid-column: 3 / 4;
  place-self: end; // Will place it at the bottom right corner
  color: var(--clr-light);
  opacity: 0.7;
  transition: opacity 275ms linear;

  display: flex; // without flex label will align with button for bottom

  &:hover {
    opacity: 1;
  }

  label {
    cursor: pointer;
  }

  // Cannot add class="sr-only" will not work because when label is clicked, <input> is active
  // Copy the content of sr-only to here.
  input {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  &__toggle {
    cursor: pointer;
    width: 4em; // Don't need to give the height as the pseudo class is going to populate it.
    border: 2px solid var(--clr-light);
    background: transparent;
    padding: 0; // get rid of the default agent padding for <button>

    // this is the same as border-radius: 10000px. It will always give you a nice pill
    border-radius: 100vmax;
    margin: 0 1em;

    &:focus {
      outline: 0;
    }

    &::before {
      content: '';
      display: block;
      background: var(--clr-light);
      border-radius: 50%;
      height: 1rem;
      width: 1rem;
      margin: 3px;

      // margin-left: auto means The left margin receives a share of the unused horizontal space,
      //              as determined mainly by the layout mode that is used.
      // Note: I personally don't like this approach because I think for toggle button, it should be
      //       clicked on the toggle container rather than on the label.
      margin-left: auto;
    }
  }

  // ~ means direct sibling
  :checked ~ .unit__toggle::before {
    margin-left: 3px;
  }
}




.previous-weather {
  // Temperately set it to none;
  display: none;

  background: var(--clr-light);
  color: var(--clr-dark);
  position: absolute;
  bottom: 0;
  width: 100%;
  transform: translateY(60%);
  transition: transform 350ms ease;

  // Don't use em.
  // While em is relative to the font-size of its direct or nearest parent, rem is only relative to the html (root) font-size.
  // Even though em and rem are the same at this level, but in line 289, it is different because the parent font-size is differnt from here.
  padding: 3rem;
}

.show-previous-weather {
  position: absolute;
  background: var(--clr-light);

  // The following two setting is the reason that it is placed in the middle
  left: 50%;
  // should not use em because the current font-size: var(--fs-h2);
  // Speical Note: I hate this.
  // But I don't know why. It seem there is a visiable thin gap between the .show-previous-weather and .previous-weather
  // And I have to put 1px to over the triangle on top of the previu
  transform: translate(-50%, calc(-100% - 3rem + 1px));

  width: 10rem;
  text-align: center;
  font-size: var(--fs-h2);
  line-height: 1;

  // top, left bottom, right bottom. Start point is top left corner
  clip-path: polygon(50% 0, 0 100%, 100% 100%);

  cursor: pointer;
  color: var(--clr-gray);

  // Adjustment after switch from checkbox to button
  border: 0;
  padding: 0;
  font-family: inherit;
  &:hover,
  &:focus {
    outline: 0;
    color: var(--clr-dark);
  }

  span {
    display: block;
    transform: rotate(0);
    transition: transform 300ms ease;
  }
}

.previous-days {
  display: flex;
  justify-content: space-between;
}

.previous-weather__title {
  text-align: center;
}

.previous-day {
  opacity: 0;

  // Not sure why it has to changed to animation as it is triggered by a trigger (unlike page load) so it can be done with transition
  //transition: opacity 350ms linear;

  & > * {margin: 0;}

  &__date {
    font-size: 0.9rem;
    color: var(--clr-gray);
  }

  &__more-info {
    cursor: pointer;
    border: 0;
    border-radius: 100vmax;
    background: var(--clr-dark);
    color: var(--clr-light);
    text-transform: uppercase;
    padding: 0.3em 1em;
    margin-top: 1em;

    &:hover,
    &:focus {
      background: var(--clr-gray);
    }
  }
}

.show-weather.previous-weather {
  transform: translateY(0);

  .show-previous-weather span {
    transform: rotate(180deg) translateY(-6px);
  }

  .previous-weather__title,
  .previous-day {
    //opacity: 1;
    animation: slideUpIn 750ms forwards;
  }

  .previous-weather__title {
    text-align: left;
  }

  .previous-day:nth-child(1) {animation-delay: 100ms}
  .previous-day:nth-child(2) {animation-delay: 125ms}
  .previous-day:nth-child(3) {animation-delay: 150ms}
  .previous-day:nth-child(4) {animation-delay: 175ms}
  .previous-day:nth-child(5) {animation-delay: 200ms}
  .previous-day:nth-child(6) {animation-delay: 225ms}
  .previous-day:nth-child(7) {animation-delay: 250ms}
}

@keyframes slideUpIn {
  0% {
    opacity: 0;
    transform: translateY(50%); // This gave the effect the the .previous-day is slide up within the panel as well
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@media (min-width: 900px) {
  :root {
    --fs-h1: 1.5rem;
    --fs-h2: 2.25rem;
    --fs-body: 1rem;
    --fs-xl: 4.5rem;
  }

  body {
    height: 100vh;
    overflow: hidden;
  }

  .mars-current-weather {
    padding: 2em;
    margin: 4em 0 0 4em; // not sure why he only want top and left margin?
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2em;
  }

  .temp {
    grid-column: 2 / 3;
    border-left: var(--border);
    border-right: var(--border);
    // The reason it looks all right for the .wind is because the gap is also 2em.
    padding: 0 2em;
  }

  .wind {
    .section-title,
    .reading {
      grid-column: 2 / 3;
    }

    &__direction {
      grid-column: 1 / 2;
      // This is for the parent
      // Method 2 to move wind__direction into the first slot is:
      grid-row: 1 / span 2;

      // SPECIAL NOTES: if you want to use 1 / -1 here you need to set grid-template-rows (line 141):
      //grid-row: 1 / -1;


      --size: 6rem;
      width: var(--size);
      height: var(--size);
      border-radius: 50%;
      background-color: rgba(255,255,255,0.5);

      // This is for itself and its children
      display: grid;
      place-items: center;
    }

    &__arrow {
      --size: 1rem;
    }
  }
}
















